
function checkSessionToken() {
  return sessionStorage.getItem('token');
}

function setSessionToken(token) {
  sessionStorage.setItem('token', token);
}

function clearSessionToken() {
  sessionStorage.removeItem('token');
}

function checkAccessToken() {
  return sessionStorage.getItem('accessToken');
}

function setAccessToken(token) {
  sessionStorage.setItem('accessToken', token);
}

function clearAccessToken() {
  sessionStorage.removeItem('accessToken');
}

var Webflow = Webflow || [];
Webflow.push(function() {
let session = null;
const storedToken = checkSessionToken();
if (storedToken) {
  session = storedToken;
}
$('#loginSubmitButton').click(async function(e) {
  e.preventDefault();

  const $form = $(this).closest('form');
  const $submit = $('[type=submit]', $form);
  const buttonText = $submit.val();
  const buttonWaitingText = $submit.attr('data-wait');
  const formData = $form.serialize();

  const email = document.getElementById('email-login').value;
  const password = document.getElementById('password-login').value;

  let session = checkSessionToken();  
  const data = session ? 
        { email, password, session } :
  { email, password };

  if (buttonWaitingText) {
    $submit.val(buttonWaitingText); 
  }

  try {
    const response = await axios.post('https://psk39h1hij.execute-api.eu-north-1.amazonaws.com/prod/signin', data);

    if (response.data.AuthenticationResult) {
      const idToken = response.data.AuthenticationResult.IdToken;
      const accessToken = response.data.AuthenticationResult.AccessToken;
      await axios.post('https://psk39h1hij.execute-api.eu-north-1.amazonaws.com/prod/validatesession', {
        token: idToken
      }).then(response => {
      }).catch(error => {
        console.error(error);
      });
      setSessionToken(idToken);
      setAccessToken(accessToken);
	  handleFunnel();
      $form
        .hide() 
        .siblings('.w-form-done').show()
        .siblings('.w-form-fail').hide();
    } else if (response.data.ChallengeName === 'SMS_MFA') {
      session = response.data.Session; 
      setSessionToken(session);
      document.getElementById('mfaLabel').style.display = 'inline'; 
      document.getElementById('mfaCode').style.display = 'inline';
    } else {
      $form
        .siblings('.w-form-done').hide()
        .siblings('.w-form-fail').show();
    }
  } catch (err) {
    console.error(err);

    $form
      .siblings('.w-form-done').hide()
      .siblings('.w-form-fail').show();
  }

  $submit.val(buttonText);
});

  $(document).off('submit');

  function jwtDecode(token) {
    var base64Url = token.split('.')[1];
    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {
      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
    return JSON.parse(jsonPayload);
  }

  function sendRequest(formData, $form, $submit, buttonText, buttonWaitingText, formRedirect) {
    
    if (typeof formData === 'string') {
        formData = JSON.parse(formData);
    }

    let userData = {};
    let policyData = {};
    let productData = {};

    console.log(formData);
    Object.entries(formData).forEach(([key, value]) => {
        if (key.startsWith('user_')) {
            userData[key.substring(5)] = value; // Remove 'user_' prefix
        } else if (key.startsWith('policy_')) {
            policyData[key.substring(7)] = value; // Remove 'policy_' prefix
        } else {
            productData[key] = value;
        }
    });

    // Create a structured data object
    let structuredData = {
        user: userData,
        policy: policyData,
        product: productData
    };

    console.log(structuredData);

    let data = JSON.stringify(structuredData);
    console.log(data);

    $.ajax({
        type: 'POST',
        url: $form.attr('action'),
        processData: true,
        contentType: 'application/json',
        data: data,
        dataType: "json",
        beforeSend: function() {
            if (buttonWaitingText) {
                $submit.val(buttonWaitingText);
            }
        },
        success: function(response) {
            if (formRedirect) {
                window.location = formRedirect;
            } else {
                $form.hide();
                $form.siblings('.w-form-done').show();
                $form.siblings('.w-form-fail').hide();
            }
        },
        error: function(response) {
            $form.siblings('.w-form-done').hide();
            $form.siblings('.w-form-fail').show();
        },
        complete: function() {
            $submit.val(buttonText);
        }
    });
}


  function handleSubmit(event) {
    event.preventDefault();
    const $form = $(this);
    const $submit = $form.find('[type=submit]');
    const buttonText = $submit.val();
    const buttonWaitingText = $submit.attr('data-wait');
    const formRedirect = $form.attr('data-redirect');

    const formData = new FormData($form[0]);

    formData.append('policy_timestamp', new Date().toISOString());
    formData.append('policy_id', uuid.v4());
    formData.append('policy_status', 'Offerte');
    formData.append('policy_angaben-zum-lead', '');
    formData.append('policy_anz-anrufe', '0');

    const token = sessionStorage.getItem('accessToken');
    const sessionToken = sessionStorage.getItem('token');
    formData.append('policy_idUser', jwtDecode(token).sub || '');
	formData.append('user_idUser', jwtDecode(token).sub || '');

	// Handle file inputs specifically marked for 'krankenkasse'
    const number = parseInt(document.getElementById('anz_personen_im_haushalt_kk').value);
    for (let i = 1; i <= number; i++) {
        const fileInput = document.getElementById(`upload${i}`);
        if (fileInput && fileInput.files.length > 0) {
            Array.from(fileInput.files).forEach((file) => {
                formData.append(`kk_file_${i}`, file);  // Mark files as part of 'kk'
            });
        }
    }

    let tableName;
    if (formData.has('PLZ-kk')) {
      tableName = 'krankenkasse';
    } else if (formData.has('Fahrzeugtyp')) {
      tableName = 'fahrzeugversicherung';
    } else if (formData.has('Geburtstag-hh')) {
      tableName = 'hausratsversicherung';
    } else if (formData.has('gewicht-lv')) {
      tableName = 'lebensversicherung';
    } else if (formData.has('produkt-rs')) {
      tableName = 'rechtsschutz';
    } else if (formData.has('personen-rv')) {
      tableName = 'reiseversicherung';
    } else if (formData.has('tierart-tv')) {
      tableName = 'tierversicherung';
    } else if (formData.has('objekttyp-gv')) {
      tableName = 'gebaeudeversicherung';
    } else if (formData.has('versicherungssumme-wv')) {
      tableName = 'wertsachenversicherung';
    } else if (formData.has('modell-hav')) {
      tableName = 'handyversicherung';
    } else if (formData.has('modell-lav')) {
      tableName = 'laptopversicherung';
    } else if (formData.has('bemerkung')) {
      tableName = 'andere';
    }
    formData.append('tableName', tableName);
	formData.append('policy_referral', jwtDecode(sessionToken)['custom:Referral'] || '');
	formData.append('user_Telefonnummer', jwtDecode(sessionToken)['phone_number'] || '');
	
	let userLanguage = navigator.language;
	
	let languageCode;

	if (userLanguage.startsWith('de')) {
		languageCode = 'DE';
	} else if (userLanguage.startsWith('fr')) {
		languageCode = 'FR';
	} else if (userLanguage.startsWith('it')) {
		languageCode = 'IT';
	} else {
		languageCode = 'EN';
	}
	
	formData.append('policy_Language', languageCode);

  function formDataToJson(formData) {
    const object = {};
    formData.forEach((value, key) => {
      if (!Reflect.has(object, key)) {
        object[key] = value;
        return;
      }
      if (!Array.isArray(object[key])) {
        object[key] = [object[key]];  
      }
      object[key].push(value);
    });
    return JSON.stringify(object);
  }
 const json = JSON.parse(formDataToJson(formData));
 const file = document.getElementById('upload').files[0];
if (file) {
  const reader = new FileReader();

  reader.onload = function(e) {
    const base64String = e.target.result;
    json["file-name"] = file.name;
    json["file-type"] = file.type;
    json["file"] = base64String;

    const jsonString = JSON.stringify(json);
    sendRequest(jsonString, $form, $submit, buttonText, buttonWaitingText, formRedirect);
  };
  reader.readAsDataURL(file);
} else {
  const jsonString = JSON.stringify(json);
  sendRequest(jsonString, $form, $submit, buttonText, buttonWaitingText, formRedirect);
}
}
var savedFormContext = null;

$('form').submit(function(event) {
	
	savedFormContext = {
      event: event,
      context: this
    };
	
    event.preventDefault();

    var formData = {};
    var formArray = $(this).serializeArray();

    // Loop over formArray to populate formData object
    formArray.forEach(function(item) {
        formData[item.name] = item.value;
    });

    function sendLead() {
        $.ajax({
            url: 'https://psk39h1hij.execute-api.eu-north-1.amazonaws.com/prod/getLead',
            type: 'POST',
            contentType: 'application/json', // Set content type to JSON
            data: JSON.stringify(formData), // Convert formData object to JSON string
			async: true
        });
    }

    sendLead();
    handleFunnel(); // Ensure this function can handle the new context
});

function handleFunnel() {
  const accessToken = sessionStorage.getItem('accessToken');
  if (!accessToken) {
    savedFormContext.event.preventDefault();
    function findFirstWithValue(selector) {
      var allInputs = $(selector);
      for (var i = 0; i < allInputs.length; i++) {
        if (allInputs[i].value.trim() !== '') {
          return allInputs[i].value;
        }
      }
      return '';
    }

	var sourceGivenName = findFirstWithValue('input[id="user_Name-22"]');
    var sourceFamilyName = findFirstWithValue('input[id="user_Nachname-2"]');
    var sourceEmail = findFirstWithValue('input[id="user_Email"]');
    var sourcePhoneNumber = findFirstWithValue('input[id="user_phoneNumber"]');
    var sourceCountryCode = findFirstWithValue('select[id="user_countryCode"]');
	
	function formatPhoneNumber(countryCode, phoneNumber) {
		return countryCode + phoneNumber;
	}

    document.getElementById('given_name').value = sourceGivenName;
    document.getElementById('family_name').value = sourceFamilyName;
    document.getElementById('email-2').value = sourceEmail;
    document.getElementById('phone_number').value = formatPhoneNumber(sourceCountryCode, sourcePhoneNumber);

    $('#registerSection').css('display', 'block');
    $('#formSection').css('display', 'none');
  } else {
    handleSubmit.call(savedFormContext.context, savedFormContext.event);
  }
}

$('#registerSubmitButton').click(async function(e) {
  e.preventDefault();

  const $form = $(this).closest('form');
  const $submit = $('[type=submit]', $form);
  const buttonText = $submit.val();
  const buttonWaitingText = $submit.attr('data-wait');
  const formData = $form.serialize();

  const password = document.getElementById('password').value;
  const email = document.getElementById('email-2').value;
  const company_name = document.getElementById('CompanyName').value;
  const given_name = document.getElementById('given_name').value;
  const family_name = document.getElementById('family_name').value;
  const gender = document.querySelector('input[name="gender"]:checked').value;
  const phone_number = document.getElementById('phone_number').value;
  const referral = document.getElementById('referral').value;

  const passwordErrors = checkPassword(password);
  if(passwordErrors.length > 0) {
    document.getElementById('password').style.border = '1px solid red';
    alert(passwordErrors.join("\n"));
    return;
  }

  const data = {
    password,
    email,
	company_name,
    given_name,
    family_name,
    phone_number,
    gender,
    referral,
  };

  if (buttonWaitingText) {
    $submit.val(buttonWaitingText); 
  }

  try {
    const response = await axios.post('https://psk39h1hij.execute-api.eu-north-1.amazonaws.com/prod/signup', data);
    const formattedData = JSON.parse(response.data.body);
    if (formattedData.name === 'UsernameExistsException') {
      alert("E-Mail existiert bereits, bitte melde dich an.");
      $submit.val("Register"); 
      return;
    } else if (formattedData.AuthenticationResult) {
		const idToken = formattedData.AuthenticationResult.IdToken;
		const accessToken = formattedData.AuthenticationResult.AccessToken;
	    setSessionToken(idToken);
		setAccessToken(accessToken);
		handleFunnel();
		document.cookie = "email=" + encodeURIComponent(email) + "; path=/";
		$form.hide().siblings('.w-form-done').show().siblings('.w-form-fail').hide();
	}
  } catch (err) {
    console.error(err);
    $form.siblings('.w-form-done').hide().siblings('.w-form-fail').show();
  }
});
});